---
import venues from '../data/venues.json';
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>DFW Hotspot Vibes</title>
    <style>
      body {
        font-family: sans-serif;
        padding: 2rem;
        background: #f9f9f9;
      }
      h1 {
        text-align: center;
        color: #333;
      }
      .card-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
        margin-top: 2rem;
      }
      .card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
      }
      .card h2 {
        margin: 0 0 0.5rem 0;
        font-size: 1.2rem;
        color: #222;
      }
      .meta {
        font-size: 0.9rem;
        color: #666;
      }
      .cost {
        font-weight: bold;
        margin-top: 0.5rem;
      }
      .links a {
        font-size: 0.85rem;
        margin-right: 10px;
        color: #0077cc;
        text-decoration: none;
      }
    </style>
  </head>
  <body>
  <h1>DFW Hotspots & Vibes</h1>

  <input
  type="text"
  id="searchInput"
  placeholder="Search venues, cities, categories..."
  style="width: 100%; padding: 0.75rem; font-size: 1rem; margin-top: 1rem; border-radius: 8px; border: 1px solid #ccc;"
/>

<!-- ðŸ”– Vibe Filters -->
<div id="vibeFilters" style="margin-top: 1rem; display: flex; flex-wrap: wrap; gap: 0.5rem;">
  {["Chill Vibes", "Grown & Sexy", "Lit", "Turn Up", "Romantic", "Classy", "Trendy", "Bougie", "Laid Back", "Date Night"].map((tag) => (
    <button
      class="vibe-btn"
      data-tag={tag}
      style="padding: 0.5rem 1rem; border-radius: 20px; border: 1px solid #ccc; background: #eee; cursor: pointer;"
    >
      {tag}
    </button>
  ))}
</div>

<div class="card-grid" id="venueList">
  {venues.map((venue, index) => (
<div
  class="card"
  data-index={index}
  data-vibes={(venue.Vibe ?? "").toLowerCase()}
  data-audience={(venue.Audience ?? "").toLowerCase()}
  data-atmosphere={(venue.Atmosphere ?? "").toLowerCase()}
>

      <h2>{venue.Venue}</h2>
      <p>{venue.Description}</p>
      <p class="meta">
        <strong>City:</strong> {venue.City ?? ''}<br />
        <strong>Area:</strong> {venue.Area ?? ''}<br />
        <strong>Category:</strong> {venue.Category}
      </p>
      <p class="cost">ðŸ’° Cost: {venue.Cost}</p>
      <div class="links">
        {venue.Website && <a href={venue.Website} target="_blank">Website</a>}
        {venue["Google Maps URL"] && <a href={venue["Google Maps URL"]} target="_blank">Map</a>}
      </div>
    </div>
  ))}
</div>

<!-- ðŸ‘¥ Audience Filters -->
<div id="audienceFilters" style="margin-top: 1rem; display: flex; flex-wrap: wrap; gap: 0.5rem;">
  {["Couples", "Singles", "Family", "30+", "40+", "Adults Only"].map((tag) => (
    <button
      class="audience-btn"
      data-tag={tag}
      style="padding: 0.5rem 1rem; border-radius: 20px; border: 1px solid #ccc; background: #eee; cursor: pointer;"
    >
      {tag}
    </button>
  ))}
</div>

<!-- ðŸŽµ Atmosphere Filters -->
<div id="atmosphereFilters" style="margin-top: 1rem; display: flex; flex-wrap: wrap; gap: 0.5rem;">
  {["Live DJ", "Live Band", "Games", "Hookah", "Karaoke", "Patio", "Rooftop", "Indoor/AC", "Dancing", "Kid Friendly"].map((tag) => (
    <button
      class="atmosphere-btn"
      data-tag={tag}
      style="padding: 0.5rem 1rem; border-radius: 20px; border: 1px solid #ccc; background: #eee; cursor: pointer;"
    >
      {tag}
    </button>
  ))}
</div>


 <script type="module">
  const searchInput = document.getElementById("searchInput");
  const cards = document.querySelectorAll(".card");

  const vibeButtons = document.querySelectorAll(".vibe-btn");
  const audienceButtons = document.querySelectorAll(".audience-btn");
  const atmosphereButtons = document.querySelectorAll(".atmosphere-btn");

  let selectedVibes = [];
  let selectedAudience = [];
  let selectedAtmosphere = [];

  function filterCards() {
    const searchQuery = searchInput.value.toLowerCase();

    cards.forEach((card) => {
      const text = card.textContent.toLowerCase();
      const vibes = card.dataset.vibes;
      const audience = card.dataset.audience;
      const atmosphere = card.dataset.atmosphere;

      const matchesSearch = text.includes(searchQuery);
      const matchesVibes = selectedVibes.length === 0 || selectedVibes.some(tag => vibes.includes(tag.toLowerCase()));
      const matchesAudience = selectedAudience.length === 0 || selectedAudience.some(tag => audience.includes(tag.toLowerCase()));
      const matchesAtmosphere = selectedAtmosphere.length === 0 || selectedAtmosphere.some(tag => atmosphere.includes(tag.toLowerCase()));

      const showCard = matchesSearch && matchesVibes && matchesAudience && matchesAtmosphere;
      card.style.display = showCard ? "block" : "none";
    });
  }

  function setupButtonFilters(buttons, selectedArray) {
    buttons.forEach((btn) => {
      btn.addEventListener("click", () => {
        const tag = btn.dataset.tag;
        const index = selectedArray.indexOf(tag);

        if (index > -1) {
          selectedArray.splice(index, 1);
          btn.style.background = "#eee";
          btn.style.color = "#000";
          btn.style.borderColor = "#ccc";
        } else {
          selectedArray.push(tag);
          btn.style.background = "#333";
          btn.style.color = "#fff";
          btn.style.borderColor = "#333";
        }

        filterCards();
      });
    });
  }

  searchInput.addEventListener("input", filterCards);
  setupButtonFilters(vibeButtons, selectedVibes);
  setupButtonFilters(audienceButtons, selectedAudience);
  setupButtonFilters(atmosphereButtons, selectedAtmosphere);
</script>
<footer style="margin-top: 4rem; padding: 2rem 1rem; text-align: center; font-size: 0.9rem; color: #555;">
  <a href="https://tiaross.net/images/tiaross.jpg" target="_blank">
    <img src="https://tiaross.net/images/tiaross.jpg" alt="Tia Ross" style="width: 50px; height: 50px; border-radius: 50%; margin-top: 0.5rem;" />
  </a><br />
  Built by <a href="https://tiaross.com/links/" target="_blank" style="color: #0077cc; text-decoration: none; font-weight: bold;">Tia Ross</a><br />
  <span style="font-style: italic;">Technocrat. Explorer. Connector.</span>
</footer>


  </body>
</html>