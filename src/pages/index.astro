---
import '../styles/style.css';
import { getVenues } from '../lib/getVenues.ts';
const venues = await getVenues();

venues.sort((a, b) => {
  const aVibe = a?.Vibe ? (Array.isArray(a.Vibe) ? a.Vibe.join(', ') : a.Vibe) : "";
  const bVibe = b?.Vibe ? (Array.isArray(b.Vibe) ? b.Vibe.join(', ') : b.Vibe) : "";

  const aMature = aVibe.toLowerCase().includes("mature crowd") ? 1 : 0;
  const bMature = bVibe.toLowerCase().includes("mature crowd") ? 1 : 0;

  return bMature - aMature;
});

---
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
<meta http-equiv="Pragma" content="no-cache" />
<meta http-equiv="Expires" content="0" />
  <title>DFW Scene | Best Places to Go Out in Dallas-Fort Worth</title>
  <meta name="description" content="Explore the best restaurants, bars, lounges, brunch spots, and nightlife venues across Dallas-Fort Worth with curated vibes, audience, and atmospheres." />
  <meta name="keywords" content="Dallas nightlife, DFW scene, DFW hotspots, brunch in Dallas, date spots DFW, live music Dallas, black-owned venues Dallas, chill bars Fort Worth, where to go out in DFW" />
  <meta name="author" content="Tia Ross" />
  <!-- Open Graph for social sharing -->
  <meta property="og:title" content="DFW Scene" />
  <meta property="og:description" content="Find your vibe in Dallas-Fort Worth — Brunch, date nights, happy hours, lounges, Black-owned gems and more." />
  <meta property="og:image" content="https://github.com/TiaDevArch/dfw-hotspots/blob/main/src/assets/Logo-DFWScene-s.png" />
  <meta property="og:url" content="https://dfwscene.app/" />
  <meta property="og:type" content="website" />
  </head>
  <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-REEXGD3XZT"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag() { dataLayer.push(arguments); }
  gtag('js', new Date());

  gtag('config', 'G-REEXGD3XZT');
</script>
  <body>
<header class="dfw-banner" role="banner">
  <a class="dfw-banner__logo" href="/" aria-label="DFW Scene — Home">
    <img
      src="/Logo-DFWScene-s.png"
      srcset="/Logo-DFWScene-s.png 1x, /Logo-DFWScene.png 2x"
      alt="DFW Scene logo"
      width="256" height="256" alt="DFW Scene" description="Explore the best restaurants, bars, lounges, brunch spots, and nightlife venues across Dallas-Fort Worth with curated vibes, audience, and atmospheres" title="DFW Scene"/>
  </a>
</header>

<!-- Centered site nav -->
<nav class="dfw-nav dfw-nav--underline is-caps" aria-label="Primary">
  <ul>
    <li><a href="/" aria-current="page">Venues</a></li>
    <li><a href="/specialevents">Special Events</a></li>
  </ul>
</nav>

<!-- Short directive below the nav -->
<p class="dfw-nav-note">
<em>See Special Events Calendar for annual, monthly, and one-off happenings that don’t follow a set schedule—unique events worth marking your calendar for.</em>
</p>



    <input
      type="text"
      id="searchInput"
      placeholder="Search days, keywords, venues, cities, atmosphere, categories..."
    />

    <div class="filter-controls">
      <button id="toggleFilterBtn">🔍 Show Filters</button>
      <button id="clearFiltersBtn" class="clear-button">Clear All Filters</button>
      <p class="instructions">
      </p>
    </div>

    <div id="dayFilters" class="filter-options">
  <button class="day-btn" data-day="friday">Friday</button>
  <button class="day-btn" data-day="saturday">Saturday</button>
  <button class="day-btn" data-day="sunday">Sunday</button>
  <button class="day-btn" data-day="monday">Monday</button>
  <button class="day-btn" data-day="tuesday">Tuesday</button>
  <button class="day-btn" data-day="wednesday">Wednesday</button>
  <button class="day-btn" data-day="thursday">Thursday</button>
  </div>

    <div id="filterPanel" class="collapsed">
      <!-- Filter Section Template -->
      <div class="filter-section">
        <h3 class="section-toggle" onclick="toggleSection('categoryFilters', this)"><span class="arrow">▶</span> Filter by Category</h3>
        <div id="categoryFilters" class="filter-options collapsed">
          {[
            "Black-Owned", "Brunch", "Cafe", "Cigar Lounge", "Cocktail Bar", "Date Spot", "Day Party", "Happy Hour", "Lounge", "Mixed-Use District", "Mixer/Networking", "Nightclub", "Outdoor Bar", "Restaurant/Bar", "Sports Bar", "Speakeasy", "Spoken Word", "Wellness/Fitness"].map(tag => <button class="category-btn" data-tag={tag}>{tag}</button>)}
        </div>
      </div>

      <div class="filter-section">
        <h3 class="section-toggle" onclick="toggleSection('vibeFilters', this)"><span class="arrow">▶</span> Filter by Vibe</h3>
        <div id="vibeFilters" class="filter-options collapsed">
          {["Bougie", "Chill Vibes", "Classy", "Date Night", "Laid Back", "Lit", "Mature Crowd", "Romantic", "Trendy", "Turn Up"]
            .map(tag => <button class="vibe-btn" data-tag={tag}>{tag}</button>)}
        </div>
      </div>

      <div class="filter-section">
        <h3 class="section-toggle" onclick="toggleSection('audienceFilters', this)"><span class="arrow">▶</span> Filter by Audience</h3>
        <div id="audienceFilters" class="filter-options collapsed">
          {["Singles", "Couples", "Small Groups", "Larger Groups"]
            .map(tag => <button class="audience-btn" data-tag={tag}>{tag}</button>)}
        </div>
      </div>

      <div class="filter-section">
        <h3 class="section-toggle" onclick="toggleSection('atmosphereFilters', this)"><span class="arrow">▶</span> Filter by Atmosphere</h3>
        <div id="atmosphereFilters" class="filter-options collapsed">
          {["Dancing", "Game Night", "Comedy", "Hookah", "Live Music", "Live DJ", "Outdoors", "Patio", "Rooftop", "Karaoke", "Games", "Cigars"]
            .map(tag => <button class="atmosphere-btn" data-tag={tag}>{tag}</button>)}
        </div>
      </div>
    </div>

<!-- Venue Cards -->
<div class="card-grid" id="venueList">
  {venues.map((venue, index) => (
    <div
      class="card"
      data-index={index}
      data-days={(Array.isArray(venue.Days) ? venue.Days.join(',') : venue.Days ?? '').toLowerCase()}
      data-vibes={(Array.isArray(venue.Vibe) ? venue.Vibe.join(', ') : venue.Vibe ?? '').toLowerCase()}
      data-audience={(Array.isArray(venue.Audience) ? venue.Audience.join(', ') : venue.Audience ?? '').toLowerCase()}
      data-atmosphere={(Array.isArray(venue.Atmosphere) ? venue.Atmosphere.join(', ') : venue.Atmosphere ?? '').toLowerCase()}
      data-category={(Array.isArray(venue.Category) ? venue.Category.join(', ') : venue.Category ?? '').toLowerCase()}
      data-whentogo={(venue['When to Go'] ?? '').toLowerCase()}
     >
     
<h2>
  {venue.Venue}
 {(Array.isArray(venue.Vibe) ? venue.Vibe.join(', ').toLowerCase() : (venue.Vibe || "").toLowerCase()).includes("mature crowd") && (
  <span class="badge grown">🔥 Mature Crowd</span>
)}
</h2>
      <p>{venue.Description}</p>
<div class="meta">
  <div class="meta-line"><strong>City:</strong> {venue.City ?? ''}</div>
  <div class="meta-line"><strong>Area:</strong> {venue.Area ?? ''}</div>
  <div class="meta-line">
  <strong>Category:</strong>{' '}
  {Array.isArray(venue.Category) ? venue.Category.join(', ') : venue.Category}
</div>
  {venue['When to Go'] && (
    <div class="meta-line">
      🕒 <strong>When to Go:</strong> {venue['When to Go']}
    </div>
  )}
{venue.Days && venue.Days.length > 0 && (
  <div class="meta-line">
    📅 <strong>Days:</strong>{' '}
    {Array.isArray(venue.Days)
      ? venue.Days.map(day => day.charAt(0).toUpperCase() + day.slice(1)).join(', ')
      : venue.Days}
  </div>
)}
<div class="meta-line cost">💰 Cost: {venue.Cost}</div>

<div class="links">
  {venue.Website && <a href={venue.Website} target="_blank">Website</a>}
  {venue['Google Maps URL'] && <a href={venue['Google Maps URL']} target="_blank">Map</a>}
</div>
    </div>
  ))}
</div>

<!-- ✍️ Suggest an Edit + Submit a Venue Buttons -->
<div style="margin-top: 3rem; text-align: center; display: flex; justify-content: center; gap: 1rem; flex-wrap: wrap;">
  <a 
    href="https://airtable.com/appv9OQhEjhG36s5H/pagr8Q7DkF8ZIvhAr/form" 
    target="_blank" 
    style="
      display: inline-block;
      padding: 0.75rem 1.5rem;
      font-size: 1rem;
      background-color: #524776;
      color: white;
      text-decoration: none;
      border-radius: 25px;
      font-weight: bold;
      box-shadow: 0 2px 6px rgba(0,0,0,0.15);
      transition: background-color 0.3s ease;
    "
  >
    ➕ Suggest an Edit
  </a>

  <a 
    href="https://form.typeform.com/to/yLG4QA9L" 
    target="_blank" 
    style="
      display: inline-block;
      padding: 0.75rem 1.5rem;
      font-size: 1rem;
      background-color: #524776;
      color: white;
      text-decoration: none;
      border-radius: 25px;
      font-weight: bold;
      box-shadow: 0 2px 6px rgba(0,0,0,0.15);
      transition: background-color 0.3s ease;
    "
  >
    📍 Submit a Venue
  </a>
</div>

<!-- Footer -->

<footer style="margin-top: 4rem; padding: 2rem 1rem; text-align: center; font-size: 0.8rem; color: #555;">
<!-- Buy Me a Book button -->
<div style="transform: scale(0.5); transform-origin: top center;">
  <script
    is:inline
    async
    src="https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js"
    data-name="bmc-button"
    data-slug="tiaross"
    data-color="#BD5FFF"
    data-emoji="📖"
    data-font="Bree"
    data-text="Buy me a book"
    data-outline-color="#000000"
    data-font-color="#ffffff"
    data-coffee-color="#FFDD00"
  ></script>
</div>



     <p>📍 DFW Scene<br />
     <em>Outings That Actually Hit. Find Your Scene.</em><br />
      <a href="/about">About</a></p>
    </footer>
   
    

<!-- ✅ Filter, Toggle, and Clear Script -->

<script type="module">
function toggleSection(sectionId, toggleElement) {
  const section = document.getElementById(sectionId);
  if (!section) return;

  const isCollapsed = section.classList.contains('collapsed');
  section.classList.toggle('collapsed', !isCollapsed);
  section.classList.toggle('expanded', isCollapsed);

  const arrow = toggleElement.querySelector('.arrow');
  if (arrow) {
    arrow.textContent = isCollapsed ? '▼' : '▶';
  }
}
// ✅ Make it accessible to inline HTML onclick handlers
window.toggleSection = toggleSection;

  document.addEventListener("DOMContentLoaded", () => {
    const searchInput = document.getElementById("searchInput");
    const cards = document.querySelectorAll(".card");

    const categoryButtons = document.querySelectorAll(".category-btn");
    const vibeButtons = document.querySelectorAll(".vibe-btn");
    const audienceButtons = document.querySelectorAll(".audience-btn");
    const atmosphereButtons = document.querySelectorAll(".atmosphere-btn");

    const toggleBtn = document.getElementById("toggleFilterBtn");
    const filterPanel = document.getElementById("filterPanel");
    const clearBtn = document.getElementById("clearFiltersBtn");

    let selectedCategories = [];
    let selectedVibes = [];
    let selectedAudience = [];
    let selectedAtmosphere = [];

    function filterCards() {
      const searchQuery = searchInput.value.toLowerCase();

      cards.forEach((card) => {
        const text = card.textContent.toLowerCase();
        const category = (card.dataset.category || "");
        const vibes = (card.dataset.vibes || "");
        const audience = (card.dataset.audience || "");
        const atmosphere = (card.dataset.atmosphere || "");

        const matchesSearch = text.includes(searchQuery);
        const matchesCategory = selectedCategories.length === 0 || selectedCategories.some(tag => category.includes(tag.toLowerCase()));
        const matchesVibes = selectedVibes.length === 0 || selectedVibes.some(tag => vibes.includes(tag.toLowerCase()));
        const matchesAudience = selectedAudience.length === 0 || selectedAudience.some(tag => audience.includes(tag.toLowerCase()));
        const matchesAtmosphere = selectedAtmosphere.length === 0 || selectedAtmosphere.some(tag => atmosphere.includes(tag.toLowerCase()));

        const showCard = matchesSearch && matchesCategory && matchesVibes && matchesAudience && matchesAtmosphere;
        card.style.display = showCard ? "block" : "none";
      });
    }

    function setupButtonFilters(buttons, selectedArray) {
      buttons.forEach((btn) => {
        btn.addEventListener("click", () => {
          const tag = btn.dataset.tag;
          const index = selectedArray.indexOf(tag);

          if (index > -1) {
            selectedArray.splice(index, 1);
            btn.style.background = "#eee";
            btn.style.color = "#000";
            btn.style.borderColor = "#ccc";
          } else {
            selectedArray.push(tag);
            btn.style.background = "#333";
            btn.style.color = "#fff";
            btn.style.borderColor = "#333";
          }

          filterCards();
        });
      });
    }

    // Init
    searchInput.addEventListener("input", filterCards);
    setupButtonFilters(categoryButtons, selectedCategories);
    setupButtonFilters(vibeButtons, selectedVibes);
    setupButtonFilters(audienceButtons, selectedAudience);
    setupButtonFilters(atmosphereButtons, selectedAtmosphere);

toggleBtn.addEventListener("click", () => {
  filterPanel.classList.toggle("open");
  filterPanel.classList.toggle("collapsed");
  toggleBtn.textContent = filterPanel.classList.contains("open")
    ? "❌ Close Filters"
    : "🔍 Show Filters";
});


    clearBtn.addEventListener("click", () => {
      selectedCategories = [];
      selectedVibes = [];
      selectedAudience = [];
      selectedAtmosphere = [];

      const allButtons = document.querySelectorAll(".category-btn, .vibe-btn, .audience-btn, .atmosphere-btn");
      allButtons.forEach((btn) => {
        btn.style.background = "#eee";
        btn.style.color = "#000";
        btn.style.borderColor = "#ccc";
      });

      searchInput.value = "";
      filterCards();
    });

    document.querySelectorAll('.day-btn').forEach(btn => {
  btn.addEventListener('click', () => {
    const selectedDay = btn.dataset.day.toLowerCase();

    // 💡 Clear existing active-day styles
    document.querySelectorAll('.day-btn').forEach(b => b.classList.remove('active-day'));

    // 💡 Add to the one that was clicked
    btn.classList.add('active-day');

    document.querySelectorAll('.card').forEach(card => {
      const cardDays = (card.dataset.days || '').toLowerCase();
      console.log("Selected:", selectedDay, "| Card Days:", cardDays);

      if (cardDays.includes(selectedDay)) {
        card.style.display = '';
      } else {
        card.style.display = 'none';
      }
    });
  });
});

  });

</script>
  </body>
</html>