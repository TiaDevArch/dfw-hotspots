---
import '../styles/style.css';
import { getVenues } from '../lib/getVenues.ts';
const venues = await getVenues();

venues.sort((a, b) => {
  const aVibe = a?.Vibe ? (Array.isArray(a.Vibe) ? a.Vibe.join(', ') : a.Vibe) : "";
  const bVibe = b?.Vibe ? (Array.isArray(b.Vibe) ? b.Vibe.join(', ') : b.Vibe) : "";

  const aMature = aVibe.toLowerCase().includes("mature crowd") ? 1 : 0;
  const bMature = bVibe.toLowerCase().includes("mature crowd") ? 1 : 0;

  return bMature - aMature;
});

---
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
<meta http-equiv="Pragma" content="no-cache" />
<meta http-equiv="Expires" content="0" />
  <title>DFW Scene | Best Places to Go Out in Dallas-Fort Worth</title>
  <meta name="description" content="Explore the best restaurants, bars, lounges, brunch spots, and nightlife venues across Dallas-Fort Worth with curated vibes, audience, and atmospheres." />
  <meta name="keywords" content="Dallas nightlife, DFW scene, DFW hotspots, brunch in Dallas, date spots DFW, live music Dallas, black-owned venues Dallas, chill bars Fort Worth, where to go out in DFW" />
  <meta name="author" content="Tia Ross" />
  <!-- Open Graph for social sharing -->
  <meta property="og:title" content="DFW Scene" />
  <meta property="og:description" content="Find your vibe in Dallas-Fort Worth ‚Äî Brunch, date nights, happy hours, lounges, Black-owned gems and more." />
  <meta property="og:image" content="https://github.com/TiaDevArch/dfw-hotspots/blob/main/src/assets/Logo-DFWScene-s.png" />
  <meta property="og:url" content="https://dfwscene.app/" />
  <meta property="og:type" content="website" />
  </head>
  <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-REEXGD3XZT"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-REEXGD3XZT');
</script>
  <body>
<header class="dfw-banner" role="banner">
  <a class="dfw-banner__logo" href="/" aria-label="DFW Scene ‚Äî Home">
    <img
      src="/Logo-DFWScene-s.png"
      srcset="/Logo-DFWScene-s.png 1x, /Logo-DFWScene.png 2x"
      alt="DFW Scene logo"
      width="256" height="256" alt="DFW Scene" description="Explore the best restaurants, bars, lounges, brunch spots, and nightlife venues across Dallas-Fort Worth with curated vibes, audience, and atmospheres" title="DFW Scene"/>
  </a>
</header>

<!-- Centered site nav -->
<nav class="dfw-nav dfw-nav--underline is-caps" aria-label="Primary">
  <ul>
    <li><a href="/" aria-current="page">Venues</a></li>
    <li><a href="/specialevents">Special Events</a></li>
  </ul>
</nav>

<!-- Short directive below the nav -->
<p class="dfw-nav-note">
<em>See Special Events Calendar for annual, monthly, and one-off happenings that don‚Äôt follow a set schedule‚Äîunique events worth marking your calendar for.</em>
</p>



    <input
      type="text"
      id="searchInput"
      placeholder="Search days, keywords, venues, cities, atmosphere, categories..."
    />

    <div class="filter-controls">
      <button id="toggleFilterBtn">üîç Show Filters</button>
      <button id="clearFiltersBtn" class="clear-button">Clear All Filters</button>
      <p class="instructions">
      </p>
    </div>

    <div id="dayFilters" class="filter-options">
  <button class="day-btn" data-day="friday">Friday</button>
  <button class="day-btn" data-day="saturday">Saturday</button>
  <button class="day-btn" data-day="sunday">Sunday</button>
  <button class="day-btn" data-day="monday">Monday</button>
  <button class="day-btn" data-day="tuesday">Tuesday</button>
  <button class="day-btn" data-day="wednesday">Wednesday</button>
  <button class="day-btn" data-day="thursday">Thursday</button>
  </div>

    <div id="filterPanel" class="collapsed">
      <!-- Filter Section Template -->
      <div class="filter-section">
        <h3 class="section-toggle" onclick="toggleSection('categoryFilters', this)"><span class="arrow">‚ñ∂</span> Filter by Category</h3>
        <div id="categoryFilters" class="filter-options collapsed">
          {[
            "Black-Owned", "Brunch", "Cafe", "Cigar Lounge", "Cocktail Bar", "Date Spot", "Day Party", "Happy Hour", "Lounge", "Mixed-Use District", "Mixer/Networking", "Nightclub", "Outdoor Bar", "Restaurant/Bar", "Sports Bar", "Speakeasy", "Spoken Word", "Wellness/Fitness"].map(tag => <button class="category-btn" data-tag={tag}>{tag}</button>)}
        </div>
      </div>

      <div class="filter-section">
        <h3 class="section-toggle" onclick="toggleSection('vibeFilters', this)"><span class="arrow">‚ñ∂</span> Filter by Vibe</h3>
        <div id="vibeFilters" class="filter-options collapsed">
          {["Bougie", "Chill Vibes", "Classy", "Date Night", "Laid Back", "Lit", "Mature Crowd", "Romantic", "Trendy", "Turn Up"]
            .map(tag => <button class="vibe-btn" data-tag={tag}>{tag}</button>)}
        </div>
      </div>

      <div class="filter-section">
        <h3 class="section-toggle" onclick="toggleSection('audienceFilters', this)"><span class="arrow">‚ñ∂</span> Filter by Audience</h3>
        <div id="audienceFilters" class="filter-options collapsed">
          {["Singles", "Couples", "Small Groups", "Larger Groups"]
            .map(tag => <button class="audience-btn" data-tag={tag}>{tag}</button>)}
        </div>
      </div>

      <div class="filter-section">
        <h3 class="section-toggle" onclick="toggleSection('atmosphereFilters', this)"><span class="arrow">‚ñ∂</span> Filter by Atmosphere</h3>
        <div id="atmosphereFilters" class="filter-options collapsed">
          {["Dancing", "Game Night", "Comedy", "Hookah", "Live Music", "Live DJ", "Outdoors", "Patio", "Rooftop", "Karaoke", "Games", "Cigars"]
            .map(tag => <button class="atmosphere-btn" data-tag={tag}>{tag}</button>)}
        </div>
      </div>
    </div>

<!-- Venue Cards -->
<div class="card-grid" id="venueList">
  {venues.map((venue, index) => (
    <div
      class="card"
      data-index={index}
      data-days={(Array.isArray(venue.Days) ? venue.Days.join(',') : venue.Days ?? '').toLowerCase()}
      data-vibes={(Array.isArray(venue.Vibe) ? venue.Vibe.join(', ') : venue.Vibe ?? '').toLowerCase()}
      data-audience={(Array.isArray(venue.Audience) ? venue.Audience.join(', ') : venue.Audience ?? '').toLowerCase()}
      data-atmosphere={(Array.isArray(venue.Atmosphere) ? venue.Atmosphere.join(', ') : venue.Atmosphere ?? '').toLowerCase()}
      data-category={(Array.isArray(venue.Category) ? venue.Category.join(', ') : venue.Category ?? '').toLowerCase()}
      data-whentogo={(venue['When to Go'] ?? '').toLowerCase()}
     >
     
<h2>
  {venue.Venue}
 {(Array.isArray(venue.Vibe) ? venue.Vibe.join(', ').toLowerCase() : (venue.Vibe || "").toLowerCase()).includes("mature crowd") && (
  <span class="badge grown">üî• Mature Crowd</span>
)}
</h2>
      <p>{venue.Description}</p>
<div class="meta">
  <div class="meta-line"><strong>City:</strong> {venue.City ?? ''}</div>
  <div class="meta-line"><strong>Area:</strong> {venue.Area ?? ''}</div>
  <div class="meta-line">
  <strong>Category:</strong>{' '}
  {Array.isArray(venue.Category) ? venue.Category.join(', ') : venue.Category}
</div>
  {venue['When to Go'] && (
    <div class="meta-line">
      üïí <strong>When to Go:</strong> {venue['When to Go']}
    </div>
  )}
  {venue.Days && venue.Days.length > 0 && (
    <div class="meta-line">
      üìÖ <strong>Days:</strong>{' '}
      {Array.isArray(venue.Days)
        ? venue.Days.map(day => day.charAt(0).toUpperCase() + day.slice(1)).join(', ')
        : venue.Days}
    </div>

<div class="meta-line cost">üí∞ Cost: {venue.Cost}</div>

<div class="links">
  {venue.Website && <a href={venue.Website} target="_blank">Website</a>}
  {venue['Google Maps URL'] && <a href={venue['Google Maps URL']} target="_blank">Map</a>}
</div>
    </div>
  ))}
</div>



      <!-- Share at the very bottom -->
      <div class="share-wrapper">
        <button class="share-btn"
          aria-haspopup="menu"
          aria-expanded="false"
          data-share-title={shareText}
          data-share-text={venue.Description ?? shareText}
          data-share-rel={rel}
          data-share-index={index}
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="18" cy="5" r="3"/><circle cx="6" cy="12" r="3"/><circle cx="18" cy="19" r="3"/><path d="M8.59 13.51l6.83 3.98"/><path d="M15.41 6.51L8.59 10.49"/></svg>
          Share
        </button>
        <div class="share-menu" role="menu" id={`share-menu-${index}`}>
          <button class="share-item" data-action="native">Share‚Ä¶</button>
          <div class="share-divider"></div>
          <button class="share-item" data-action="copy">Copy link</button>
          <button class="share-item" data-action="fb">Share to Facebook</button>
          <button class="share-item" data-action="wa">Share to WhatsApp</button>
          <button class="share-item" data-action="tg">Share to Telegram</button>
          <button class="share-item" data-action="bsky">Share to Bluesky</button>
          <button class="share-item" data-action="mail">Share via Email</button>
          <div class="share-divider"></div>
          <button class="share-item" data-action="qr">Show QR</button>
        </div>
      </div>

    </div>
    );
  })}
</div>

<script>
(function(){
  const grid = document.getElementById('venueList');
  const toast = createToast();

  function absUrl(rel){
    try { return new URL(rel, window.location.origin).toString(); }
    catch { return window.location.origin + rel; }
  }

  // Add UTMs for share INTENTS only (not for copy)
  function withUtm(url){
    const u = new URL(url);
    if(!u.searchParams.has('utm_source')){
      u.searchParams.set('utm_source','share');
      u.searchParams.set('utm_medium','card');
      u.searchParams.set('utm_campaign','dfwscene');
    }
    return u.toString();
  }

  function openMenu(btn){
    closeAll();
    const idx = btn.getAttribute('data-share-index');
    const m = document.getElementById(`share-menu-${idx}`);
    if(m){ m.classList.add('open'); btn.setAttribute('aria-expanded','true'); }
    document.addEventListener('click', onDocClick, { once:true });
  }
  function closeAll(){
    document.querySelectorAll('.share-menu.open').forEach(m => m.classList.remove('open'));
    document.querySelectorAll('.share-btn[aria-expanded="true"]').forEach(b => b.setAttribute('aria-expanded','false'));
  }
  function onDocClick(e){ if(!e.target.closest('.share-wrapper')) closeAll(); }

  async function doNativeShare(title, text, url){
    if(navigator.share){
      try{ await navigator.share({ title, text, url }); track('native', url); return true; }
      catch{ /* fall back to menu */ }
    }
    return false;
  }

  function copyToClipboard(text){
    return (navigator.clipboard?.writeText(text) || Promise.reject())
      .then(()=> showToast('Link copied'))
      .catch(()=>{
        const ta=document.createElement('textarea');
        ta.value=text; document.body.appendChild(ta); ta.select();
        try{ document.execCommand('copy'); }catch{}
        document.body.removeChild(ta);
        showToast('Link copied');
      });
  }

  // Social intents (no SDKs). NOTE: no Twitter/X here.
  function social(kind, title, text, url){
    const u = encodeURIComponent(url);
    const t = encodeURIComponent(text || title || '');
    const s = encodeURIComponent(title || '');
    const href =
        kind === 'fb'   ? `https://www.facebook.com/sharer/sharer.php?u=${u}`
      : kind === 'wa'   ? `https://api.whatsapp.com/send?text=${t}%20${u}`
      : kind === 'tg'   ? `https://t.me/share/url?url=${u}&text=${t}`
      : kind === 'bsky' ? `https://bsky.app/intent/compose?text=${t}&url=${u}`
      : /* mail */        `mailto:?subject=${s}&body=${t}%20${u}`;
    window.open(href, '_blank', 'noopener,noreferrer');
    track(kind, url);
  }

  function track(method, url){
    // Hook in analytics here if you‚Äôd like, e.g. gtag('event','share',{method, item_id:url})
  }

  function createToast(){ const el=document.createElement('div'); el.className='toast'; document.body.appendChild(el); return el; }
  function showToast(msg){ toast.textContent=msg; toast.classList.add('show'); setTimeout(()=> toast.classList.remove('show'), 1400); }

  // QR modal (no deps)
  const qr = createQrModal();
  function createQrModal(){
    const overlay = document.createElement('div');
    overlay.className = 'qr-overlay';
    overlay.innerHTML = `
      <div class="qr-modal">
        <h3>Scan to open</h3>
        <img id="qr-img" alt="QR code" width="256" height="256" />
        <div class="share-divider" style="margin:.65rem 0"></div>
        <button class="share-btn qr-close">Close</button>
      </div>`;
    document.body.appendChild(overlay);
    overlay.addEventListener('click', (e)=>{
      if(e.target === overlay || e.target.closest('.qr-close')) overlay.classList.remove('open');
    });
    return overlay;
  }
  function showQr(url){
    const img = qr.querySelector('#qr-img');
    const api = 'https://api.qrserver.com/v1/create-qr-code/';
    img.setAttribute('src', api + '?size=256x256&data=' + encodeURIComponent(url));
    qr.classList.add('open');
  }

  grid?.addEventListener('click', async (e)=>{
    const btn = e.target.closest('.share-btn');
    const item = e.target.closest('.share-item');

    if(btn){
      const title = btn.getAttribute('data-share-title') || document.title;
      const text  = btn.getAttribute('data-share-text') || title;
      const rel   = btn.getAttribute('data-share-rel') || '/';
      const url   = absUrl(rel);
      const did   = await doNativeShare(title, text, url);
      if(!did) openMenu(btn);
    }

    if(item){
      const wrap  = item.closest('.share-wrapper');
      const btn2  = wrap.querySelector('.share-btn');
      const title = btn2.getAttribute('data-share-title') || document.title;
      const text  = btn2.getAttribute('data-share-text') || title;
      const rel   = btn2.getAttribute('data-share-rel') || '/';
      const url   = absUrl(rel);
      const action = item.getAttribute('data-action');

      if(action === 'native'){
        await doNativeShare(title, text, url);
      } else if(action === 'copy'){
        // Copy clean URL (no UTMs)
        await copyToClipboard(url);
      } else if(['fb','wa','tg','bsky','mail'].includes(action)){
        // Add UTMs only on outbound share intents
        social(action, title, text, withUtm(url));
      } else if(action === 'qr'){
        showQr(withUtm(url));
      }
      closeAllMenus();
    }
  });

})();
</script>

<!-- ‚úçÔ∏è Suggest an Edit + Submit a Venue Buttons -->
<div style="margin-top: 3rem; text-align: center; display: flex; justify-content: center; gap: 1rem; flex-wrap: wrap;">
  <a 
    href="https://airtable.com/appv9OQhEjhG36s5H/pagr8Q7DkF8ZIvhAr/form" 
    target="_blank" 
    style="
      display: inline-block;
      padding: 0.75rem 1.5rem;
      font-size: 1rem;
      background-color: #524776;
      color: white;
      text-decoration: none;
      border-radius: 25px;
      font-weight: bold;
      box-shadow: 0 2px 6px rgba(0,0,0,0.15);
      transition: background-color 0.3s ease;
    "
    onmouseover="this.style.backgroundColor='#3f3861'"
    onmouseout="this.style.backgroundColor='#524776'"
  >
    ‚ûï Suggest an Edit
  </a>

  <a 
    href="https://form.typeform.com/to/yLG4QA9L" 
    target="_blank" 
    style="
      display: inline-block;
      padding: 0.75rem 1.5rem;
      font-size: 1rem;
      background-color: #524776;
      color: white;
      text-decoration: none;
      border-radius: 25px;
      font-weight: bold;
      box-shadow: 0 2px 6px rgba(0,0,0,0.15);
      transition: background-color 0.3s ease;
    "
    onmouseover="this.style.backgroundColor='#3f3861'"
    onmouseout="this.style.backgroundColor='#524776'"
  >
    üìç Submit a Venue
  </a>
</div>


<!-- Footer -->


<footer style="margin-top: 4rem; padding: 2rem 1rem; text-align: center; font-size: 0.8rem; color: #555;">
<div style="transform: scale(0.5); transform-origin: top center;">
  <script type="text/javascript" 
    src="https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js" 
    data-name="bmc-button" 
    data-slug="tiaross" 
    data-color="#BD5FFF" 
    data-emoji="üìñ"  
    data-font="Bree" 
    data-text="Buy me a book" 
    data-outline-color="#000000" 
    data-font-color="#ffffff" 
    data-coffee-color="#FFDD00">
  </script>
</div>

     <p>üìç DFW Scene<br />
     <em>Outings That Actually Hit. Find Your Scene.</em><br />
      <a href="/about">About</a></p>
    </footer>
   
    

<!-- ‚úÖ Filter, Toggle, and Clear Script -->

<script type="module">
function toggleSection(sectionId, toggleElement) {
  const section = document.getElementById(sectionId);
  if (!section) return;

  const isCollapsed = section.classList.contains('collapsed');
  section.classList.toggle('collapsed', !isCollapsed);
  section.classList.toggle('expanded', isCollapsed);

  const arrow = toggleElement.querySelector('.arrow');
  if (arrow) {
    arrow.textContent = isCollapsed ? '‚ñº' : '‚ñ∂';
  }
}
// ‚úÖ Make it accessible to inline HTML onclick handlers
window.toggleSection = toggleSection;

  document.addEventListener("DOMContentLoaded", () => {
    const searchInput = document.getElementById("searchInput");
    const cards = document.querySelectorAll(".card");

    const categoryButtons = document.querySelectorAll(".category-btn");
    const vibeButtons = document.querySelectorAll(".vibe-btn");
    const audienceButtons = document.querySelectorAll(".audience-btn");
    const atmosphereButtons = document.querySelectorAll(".atmosphere-btn");

    const toggleBtn = document.getElementById("toggleFilterBtn");
    const filterPanel = document.getElementById("filterPanel");
    const clearBtn = document.getElementById("clearFiltersBtn");

    let selectedCategories = [];
    let selectedVibes = [];
    let selectedAudience = [];
    let selectedAtmosphere = [];

    function filterCards() {
      const searchQuery = searchInput.value.toLowerCase();

      cards.forEach((card) => {
        const text = card.textContent.toLowerCase();
        const category = (card.dataset.category || "");
        const vibes = (card.dataset.vibes || "");
        const audience = (card.dataset.audience || "");
        const atmosphere = (card.dataset.atmosphere || "");

        const matchesSearch = text.includes(searchQuery);
        const matchesCategory = selectedCategories.length === 0 || selectedCategories.some(tag => category.includes(tag.toLowerCase()));
        const matchesVibes = selectedVibes.length === 0 || selectedVibes.some(tag => vibes.includes(tag.toLowerCase()));
        const matchesAudience = selectedAudience.length === 0 || selectedAudience.some(tag => audience.includes(tag.toLowerCase()));
        const matchesAtmosphere = selectedAtmosphere.length === 0 || selectedAtmosphere.some(tag => atmosphere.includes(tag.toLowerCase()));

        const showCard = matchesSearch && matchesCategory && matchesVibes && matchesAudience && matchesAtmosphere;
        card.style.display = showCard ? "block" : "none";
      });
    }

    function setupButtonFilters(buttons, selectedArray) {
      buttons.forEach((btn) => {
        btn.addEventListener("click", () => {
          const tag = btn.dataset.tag;
          const index = selectedArray.indexOf(tag);

          if (index > -1) {
            selectedArray.splice(index, 1);
            btn.style.background = "#eee";
            btn.style.color = "#000";
            btn.style.borderColor = "#ccc";
          } else {
            selectedArray.push(tag);
            btn.style.background = "#333";
            btn.style.color = "#fff";
            btn.style.borderColor = "#333";
          }

          filterCards();
        });
      });
    }

    // Init
    searchInput.addEventListener("input", filterCards);
    setupButtonFilters(categoryButtons, selectedCategories);
    setupButtonFilters(vibeButtons, selectedVibes);
    setupButtonFilters(audienceButtons, selectedAudience);
    setupButtonFilters(atmosphereButtons, selectedAtmosphere);

toggleBtn.addEventListener("click", () => {
  filterPanel.classList.toggle("open");
  filterPanel.classList.toggle("collapsed");
  toggleBtn.textContent = filterPanel.classList.contains("open")
    ? "‚ùå Close Filters"
    : "üîç Show Filters";
});


    clearBtn.addEventListener("click", () => {
      selectedCategories = [];
      selectedVibes = [];
      selectedAudience = [];
      selectedAtmosphere = [];

      const allButtons = document.querySelectorAll(".category-btn, .vibe-btn, .audience-btn, .atmosphere-btn");
      allButtons.forEach((btn) => {
        btn.style.background = "#eee";
        btn.style.color = "#000";
        btn.style.borderColor = "#ccc";
      });

      searchInput.value = "";
      filterCards();
    });

    document.querySelectorAll('.day-btn').forEach(btn => {
  btn.addEventListener('click', () => {
    const selectedDay = btn.dataset.day.toLowerCase();

    // üí° Clear existing active-day styles
    document.querySelectorAll('.day-btn').forEach(b => b.classList.remove('active-day'));

    // üí° Add to the one that was clicked
    btn.classList.add('active-day');

    document.querySelectorAll('.card').forEach(card => {
      const cardDays = (card.dataset.days || '').toLowerCase();
      console.log("Selected:", selectedDay, "| Card Days:", cardDays);

      if (cardDays.includes(selectedDay)) {
        card.style.display = '';
      } else {
        card.style.display = 'none';
      }
    });
  });
});

  });

</script>
  </body>
</html>