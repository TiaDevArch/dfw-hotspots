---
import '../styles/style.css';
import { getVenues } from '../lib/getVenues.ts';
const venues = await getVenues();
const apiKey = import.meta.env.PUBLIC_AIRTABLE_SPECIAL_EVENTS_KEY;
const baseId = import.meta.env.PUBLIC_AIRTABLE_SPECIAL_EVENTS_BASE;
const tableName = import.meta.env.PUBLIC_AIRTABLE_SPECIAL_EVENTS_TABLE;

// SLUGIFY CODE BEGINS
// Special Event Share integration
const slugify = (s) => s?.toString().toLowerCase().trim()
  .replace(/[^a-z0-9]+/g, '-')
  .replace(/(^-|-$)+/g, '');
// SLUGIFY CODE ENDS

let events = [];
let allEvents = [];
let upcomingEvents = [];
let pastEvents = [];

try {
  const res = await fetch(`https://api.airtable.com/v0/${baseId}/${tableName}?view=Grid%20view`, {
    headers: {
      Authorization: `Bearer ${apiKey}`,
    },
  });

  const json = await res.json();

  if (!json.records) {
    console.error("‚ö†Ô∏è Airtable response missing 'records':", json);
  }

  allEvents = (json.records || [])
    .map((r) => r.fields)
    .filter((e) => e["Event Date"]);


const now = new Date();

// Normalize today to midnight (start of the day)
const today = new Date();
today.setHours(0, 0, 0, 0);

upcomingEvents = allEvents.filter((e) => new Date(e["Event Date"]) >= today);
pastEvents = allEvents.filter((e) => new Date(e["Event Date"]) < today);

upcomingEvents.sort((a, b) => new Date(a["Event Date"]) - new Date(b["Event Date"]));
pastEvents.sort((a, b) => new Date(b["Event Date"]) - new Date(a["Event Date"]));

} catch (error) {
  console.error("‚ùå Failed to fetch Airtable data:", error);
}
---

<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>DFW Scene | Special Events in Dallas-Fort Worth</title>
  <meta name="description" content="Explore the best restaurants, bars, lounges, brunch spots, and nightlife venues across Dallas-Fort Worth with curated vibes, audience, and atmospheres." />
  <meta name="keywords" content="Dallas nightlife, DFW hotspots, brunch in Dallas, date spots DFW, live music Dallas, black-owned venues Dallas, chill bars, Arlington, Las Colinas, Plano, Frisco, Irving, Grand Prairie, Mansfield, Carrollton, Richardson, Desoto, Duncanville, Cedar Hill, Lewisville, Fort Worth, where to go out in DFW" />
  <meta name="author" content="Tia Ross" />

  <!-- Open Graph for social sharing -->
  <meta property="og:title" content="DFW Scene" />
  <meta property="og:description" content="Find your scene in Dallas-Fort Worth ‚Äî Brunch, date nights, happy hours, lounges, Black-owned gems and more." />
  <meta property="og:image" content="https://github.com/TiaDevArch/dfw-hotspots/blob/main/src/assets/Logo-DFWScene-s.png" />
  <meta property="og:url" content="https://dfwscene.app/" />
  <meta property="og:type" content="website" />
</head>
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-REEXGD3XZT"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-REEXGD3XZT');
</script>
  <body>
<header class="dfw-banner" role="banner">
  <a class="dfw-banner__logo" href="/" aria-label="DFW Scene ‚Äî Home">
    <img
      src="/Logo-DFWScene-s.png"
      srcset="/Logo-DFWScene-s.png 1x, /Logo-DFWScene.png 2x"
      alt="DFW Scene logo"
      width="256" height="256" alt="DFW Scene" description="Explore the best restaurants, bars, lounges, brunch spots, and nightlife venues across Dallas-Fort Worth with curated vibes, audience, and atmospheres" title="DFW Scene"/>
  </a>
</header>

<!-- Centered site nav -->
<nav class="dfw-nav dfw-nav--underline is-caps" aria-label="Primary">
  <ul>
    <li><a href="/">Venues</a></li>
    <li><a href="/specialevents" aria-current="page">Special Events</a></li>
  </ul>
</nav>

      <p>Explore special events happening around Dallas-Fort Worth!</p>

<!-- UPCOMING EVENTS -->
<h3 class="section-heading">Upcoming Events</h3>
<script>
document.addEventListener("DOMContentLoaded", () => {
  const searchInput = document.createElement("input");
  searchInput.type = "text";
  searchInput.placeholder = "Search events by name, venue, or description‚Ä¶";
  searchInput.className = "events-search";

  // Insert after the first section heading or after the nav note as fallback
  const anchor = document.querySelector('.section-heading')
                || document.querySelector('.dfw-nav-note')
                || document.querySelector('.dfw-nav');
  if (anchor && anchor.parentNode) {
    anchor.parentNode.insertBefore(searchInput, anchor.nextSibling);
  }

  searchInput.addEventListener('input', (e) => {
    const term = e.target.value.toLowerCase();
    document.querySelectorAll('#special-event-container .card').forEach(card => {
      card.style.display = card.textContent.toLowerCase().includes(term) ? '' : 'none';
    });
  });
});
</script>





function toastMsg(m){toast.textContent=m;toast.classList.add('show');setTimeout(()=>toast.classList.remove('show'),1400)}


// QR modal
const qr=createQrModal();
function createQrModal(){
const overlay=document.createElement('div');
overlay.className='qr-overlay';
overlay.innerHTML=`
<div class="qr-modal">
<h3>Scan to open</h3>
<img id="qr-img" alt="QR code" width="256" height="256" />
<div class="share-divider" style="margin:.65rem 0"></div>
<button class="share-btn qr-close">Close</button>
</div>`;
document.body.appendChild(overlay);
overlay.addEventListener('click',e=>{if(e.target===overlay||e.target.closest('.qr-close'))overlay.classList.remove('open')});
return overlay;
}


function showQr(url){
const img=qr.querySelector('#qr-img');
const api='https://api.qrserver.com/v1/create-qr-code/';
img.setAttribute('src',api+'?size=256x256&data='+encodeURIComponent(url));
qr.classList.add('open');
}


grid?.addEventListener('click',async e=>{
const b=e.target.closest('.share-btn');
const i=e.target.closest('.share-item');


if(b){
const t=b.getAttribute('data-share-title')||document.title;
const tx=b.getAttribute('data-share-text')||t;
const rel=b.getAttribute('data-share-rel')||'/';
const u=absUrl(rel);
const did=await nativeShare(t,tx,u);
if(!did)openMenu(b);
}


if(i){
const wrap=i.closest('.share-wrapper');
const b2=wrap.querySelector('.share-btn');
const t=b2.getAttribute('data-share-title')||document.title;
const tx=b2.getAttribute('data-share-text')||t;
const rel=b2.getAttribute('data-share-rel')||'/';
const u=absUrl(rel);
const a=i.getAttribute('data-action');


if(a==='native'){
await nativeShare(t,tx,u);
} else if(a==='copy'){
await copyLink(u);
} else if(['fb','wa','tg','bsky','thr','mail'].includes(a)){
social(a,t,tx,withUtmIfSameOrigin(u));
} else if(a==='qr'){
showQr(withUtmIfSameOrigin(u));
}
closeAll();
}
});
})();
</script>
<!-- end of card -->



<!-- PAST EVENTS -->
<h3 class="section-heading">Past Events</h3>
<div class="card-grid-wrapper">
  <div class="card-grid compact">
    {pastEvents.map((event, index) => (
      <div
        class="card past-event"
        data-index={index}
        data-city={(event["City"] || "").toLowerCase()}
        data-area={(event["Area"] || "").toLowerCase()}
        data-tags={(event["Tags"] || []).join(",").toLowerCase()}
      >
        <h2>{event["Event Name"]}</h2>
        {event.Description && <p>{event.Description}</p>}
        <div class="meta">
          {event.Venue && <div class="meta-line"><strong>Venue:</strong> {event.Venue}</div>}
          {event.City && <div class="meta-line"><strong>City:</strong> {event.City}</div>}
          {event.Area && <div class="meta-line"><strong>Area:</strong> {event.Area}</div>}
        </div>
        {event["Event Date"] && (
          <p class="when-to-go"><i>{event["Event Date"]}</i></p>
        )}
        {event["Event Page URL"] && (
  <div class="links">
    <a href={event["Event Page URL"]} target="_blank" rel="noopener noreferrer">
      More Info
    </a>
  </div>
)}
      </div>
    ))}
  </div>
</div>


<!-- Footer -->

<footer style="margin-top: 4rem; padding: 2rem 1rem; text-align: center; font-size: 0.8rem; color: #555;">
<div style="transform: scale(0.5); transform-origin: top center;">
  <script type="text/javascript" 
    src="https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js" 
    data-name="bmc-button" 
    data-slug="tiaross" 
    data-color="#BD5FFF" 
    data-emoji="üìñ"  
    data-font="Bree" 
    data-text="Buy me a book" 
    data-outline-color="#000000" 
    data-font-color="#ffffff" 
    data-coffee-color="#FFDD00">
  </script>
</div>

     <p>üìç DFW Scene<br />
     <em>Outings That Actually Hit. Find Your Scene.</em><br />
      <a href="/about">About</a></p>
    </footer>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const searchInput = document.createElement("input");
  searchInput.type = "text";
  searchInput.placeholder = "Search events by name, venue, or description...";
  searchInput.style.cssText = `
    width: 100%;
    padding: 0.75rem;
    margin: 1rem 0;
    border-radius: 8px;
    border: 1px solid #ccc;
    font-size: 1rem;
  `;

  // Insert search bar after the header
  document.querySelector('.about-header').after(searchInput);

  searchInput.addEventListener('input', (e) => {
    const term = e.target.value.toLowerCase();
    document.querySelectorAll('#special-event-container .card').forEach(card => {
      const text = card.textContent.toLowerCase();
      card.style.display = text.includes(term) ? 'block' : 'none';
    });
  });
});
const qr = createQrModal();
function createQrModal(){
  const overlay = document.createElement('div');
  overlay.className = 'qr-overlay';
  overlay.innerHTML = `
    <div class="qr-modal">
      <h3>Scan to open</h3>
      <img id="qr-img" alt="QR code" width="256" height="256" />
      <div class="share-divider" style="margin:.65rem 0"></div>
      <button class="share-btn qr-close">Close</button>
    </div>`;
  document.body.appendChild(overlay);
  overlay.addEventListener('click', (e)=>{
    if(e.target === overlay || e.target.closest('.qr-close')) overlay.classList.remove('open');
  });
  return overlay;
}
function showQr(url){
  const img = qr.querySelector('#qr-img');
  const api = 'https://api.qrserver.com/v1/create-qr-code/';
  img.setAttribute('src', api + '?size=256x256&data=' + encodeURIComponent(url));
  qr.classList.add('open');
}
</script>
  </body>
</html>