---
import '../styles/style.css';
import { getVenues } from '../lib/getVenues.ts';
const venues = await getVenues();
const apiKey = import.meta.env.PUBLIC_AIRTABLE_SPECIAL_EVENTS_KEY;
const baseId = import.meta.env.PUBLIC_AIRTABLE_SPECIAL_EVENTS_BASE;
const tableName = import.meta.env.PUBLIC_AIRTABLE_SPECIAL_EVENTS_TABLE;

let events = [];
let allEvents = [];
let upcomingEvents = [];
let pastEvents = [];

try {
  const res = await fetch(`https://api.airtable.com/v0/${baseId}/${tableName}?view=Grid%20view`, {
    headers: {
      Authorization: `Bearer ${apiKey}`,
    },
  });

  const json = await res.json();

  if (!json.records) {
    console.error("⚠️ Airtable response missing 'records':", json);
  }

  allEvents = (json.records || [])
    .map((r) => r.fields)
    .filter((e) => e["Event Date"]);


const now = new Date();

// Normalize today to midnight (start of the day)
const today = new Date();
today.setHours(0, 0, 0, 0);

upcomingEvents = allEvents.filter((e) => new Date(e["Event Date"]) >= today);
pastEvents = allEvents.filter((e) => new Date(e["Event Date"]) < today);

upcomingEvents.sort((a, b) => new Date(a["Event Date"]) - new Date(b["Event Date"]));
pastEvents.sort((a, b) => new Date(b["Event Date"]) - new Date(a["Event Date"]));

} catch (error) {
  console.error("❌ Failed to fetch Airtable data:", error);
}
---

<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>DFW Scene | Special Events in Dallas-Fort Worth</title>
  <meta name="description" content="Explore the best restaurants, bars, lounges, brunch spots, and nightlife venues across Dallas-Fort Worth with curated vibes, audience, and atmospheres." />
  <meta name="keywords" content="Dallas nightlife, DFW hotspots, brunch in Dallas, date spots DFW, live music Dallas, black-owned venues Dallas, chill bars, Arlington, Las Colinas, Plano, Frisco, Irving, Grand Prairie, Mansfield, Carrollton, Richardson, Desoto, Duncanville, Cedar Hill, Lewisville, Fort Worth, where to go out in DFW" />
  <meta name="author" content="Tia Ross" />

  <!-- Open Graph for social sharing -->
  <meta property="og:title" content="DFW Scene" />
  <meta property="og:description" content="Find your scene in Dallas-Fort Worth — Brunch, date nights, happy hours, lounges, Black-owned gems and more." />
  <meta property="og:image" content="https://github.com/TiaDevArch/dfw-hotspots/blob/main/src/assets/Logo-DFWScene-s.png" />
  <meta property="og:url" content="https://dfwscene.app/" />
  <meta property="og:type" content="website" />
</head>
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-REEXGD3XZT"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-REEXGD3XZT');
</script>
  <body>
<header class="dfw-banner" role="banner">
  <a class="dfw-banner__logo" href="/" aria-label="DFW Scene — Home">
    <img
      src="/Logo-DFWScene-s.png"
      srcset="/Logo-DFWScene-s.png 1x, /Logo-DFWScene.png 2x"
      alt="DFW Scene logo"
      width="256" height="256" alt="DFW Scene" description="Explore the best restaurants, bars, lounges, brunch spots, and nightlife venues across Dallas-Fort Worth with curated vibes, audience, and atmospheres" title="DFW Scene"/>
  </a>
</header>

<!-- Centered site nav -->
<nav class="dfw-nav dfw-nav--underline is-caps" aria-label="Primary">
  <ul>
    <li><a href="/">Venues</a></li>
    <li><a href="/specialevents" aria-current="page">Special Events</a></li>
  </ul>
</nav>

      <p>Explore special events happening around Dallas-Fort Worth!</p>

<!-- UPCOMING EVENTS -->
<h3 class="section-heading">Upcoming Events</h3>
<script>
document.addEventListener("DOMContentLoaded", () => {
  const searchInput = document.createElement("input");
  searchInput.type = "text";
  searchInput.placeholder = "Search events by name, venue, or description…";
  searchInput.className = "events-search";

  // Insert after the first section heading or after the nav note as fallback
  const anchor = document.querySelector('.section-heading')
                || document.querySelector('.dfw-nav-note')
                || document.querySelector('.dfw-nav');
  if (anchor && anchor.parentNode) {
    anchor.parentNode.insertBefore(searchInput, anchor.nextSibling);
  }

  searchInput.addEventListener('input', (e) => {
    const term = e.target.value.toLowerCase();
    document.querySelectorAll('#special-event-container .card').forEach(card => {
      card.style.display = card.textContent.toLowerCase().includes(term) ? '' : 'none';
    });
  });
});
</script>

<div class="card-grid-wrapper">
  <div class="card-grid compact" id="special-event-container">
    {upcomingEvents.map((event, index) => (
      <div
        class="card"
        data-index={index}
        data-city={(event["City"] || "").toLowerCase()}
        data-area={(event["Area"] || "").toLowerCase()}
        data-tags={(event["Tags"] || []).join(",").toLowerCase()}
      >
        <h2>{event["Event Name"]}</h2>
        {event.Description && <p>{event.Description}</p>}
        <div class="meta">
          {event.Venue && <div class="meta-line"><strong>Venue:</strong> {event.Venue}</div>}
          {event.City && <div class="meta-line"><strong>City:</strong> {event.City}</div>}
          {event.Area && <div class="meta-line"><strong>Area:</strong> {event.Area}</div>}
        </div>
        {event["Event Date"] && (
  <p class="when-to-go">
    <i>{event["Event Date"]}</i>
    {event["Event Time"] && `| ${event["Event Time"]}`}
  </p>
)}
        {event["Event URL"] && (
  <div class="links">
    <a href={event["Event URL"]} target="_blank" rel="noopener noreferrer">
      More Info
    </a>
  </div>
)}


<!-- start of share function -->
<div class="share-wrapper">
          <button class="share-btn"
            aria-haspopup="menu"
            aria-expanded="false"
            data-share-title={shareText}
            data-share-text={event.Description ?? shareText}
            data-share-rel={rel}
            data-share-index={index}
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="18" cy="5" r="3"/><circle cx="6" cy="12" r="3"/><circle cx="18" cy="19" r="3"/><path d="M8.59 13.51l6.83 3.98"/><path d="M15.41 6.51L8.59 10.49"/></svg>
            Share
          </button>
          <div class="share-menu" role="menu" id={`share-menu-${index}`}>
            <button class="share-item" data-action="native">Share…</button>
            <div class="share-divider"></div>
            <button class="share-item" data-action="copy">Copy link</button>
            <button class="share-item" data-action="fb">Share to Facebook</button>
            <button class="share-item" data-action="wa">Share to WhatsApp</button>
            <button class="share-item" data-action="tg">Share to Telegram</button>
            <button class="share-item" data-action="bsky">Share to Bluesky</button>
            <button class="share-item" data-action="thr">Share to Threads</button>
            <button class="share-item" data-action="mail">Share via Email</button>
            <div class="share-divider"></div>
            <button class="share-item" data-action="qr">Show QR</button>
          </div>
        </div>
<!-- end of share function addition -->
      </div>
      );
    })}
  </div>
</div>

<script>
(function(){
  const grid = document.getElementById('special-event-container');
  const toast = createToast();

  function absUrl(rel){
    // If rel is absolute (external event URL), return as-is.
    try {
      const u = new URL(rel, window.location.origin);
      return u.toString();
    } catch {
      return window.location.origin + rel;
    }
  }

  // Add UTMs only when sharing your own domain; don't mutate external event URLs.
  function withUtmIfSameOrigin(url){
    try{
      const u = new URL(url);
      if(u.origin === window.location.origin){
        if(!u.searchParams.has('utm_source')){
          u.searchParams.set('utm_source','share');
          u.searchParams.set('utm_medium','event-card');
          u.searchParams.set('utm_campaign','dfwscene');
        }
      }
      return u.toString();
    }catch{return url;}
  }

  function openMenu(btn){
    closeAll();
    const idx = btn.getAttribute('data-share-index');
    const m = document.getElementById(`share-menu-${idx}`);
    if(m){ m.classList.add('open'); btn.setAttribute('aria-expanded','true'); }
    document.addEventListener('click', onDocClick, { once:true });
  }
  function closeAll(){
    document.querySelectorAll('.share-menu.open').forEach(m => m.classList.remove('open'));
    document.querySelectorAll('.share-btn[aria-expanded="true"]').forEach(b => b.setAttribute('aria-expanded','false'));
  }
  function onDocClick(e){ if(!e.target.closest('.share-wrapper')) closeAll(); }

  async function doNativeShare(title, text, url){
    if(navigator.share){
      try{ await navigator.share({ title, text, url }); track('native', url); return true; }
      catch{ /* fall back to menu */ }
    }
    return false;
  }

  function copyToClipboard(text){
    return (navigator.clipboard?.writeText(text) || Promise.reject())
      .then(()=> showToast('Link copied'))
      .catch(()=>{
        const ta=document.createElement('textarea');
        ta.value=text; document.body.appendChild(ta); ta.select();
        try{ document.execCommand('copy'); }catch{}
        document.body.removeChild(ta);
        showToast('Link copied');
      });
  }

  // Social intents (no SDKs). No Twitter/X. Adds Bluesky + Threads.
  function social(kind, title, text, url){
    const u = encodeURIComponent(url);
    const t = encodeURIComponent(text || title || '');
    const s = encodeURIComponent(title || '');
    const href =
        kind === 'fb'   ? `https://www.facebook.com/sharer/sharer.php?u=${u}`
      : kind === 'wa'   ? `https://api.whatsapp.com/send?text=${t}%20${u}`
      : kind === 'tg'   ? `https://t.me/share/url?url=${u}&text=${t}`
      : kind === 'bsky' ? `https://bsky.app/intent/compose?text=${t}&url=${u}`
      : kind === 'thr'  ? `https://www.threads.net/intent/post?text=${t}%20${u}`
      : /* mail */        `mailto:?subject=${s}&body=${t}%20${u}`;
    window.open(href, '_blank', 'noopener,noreferrer');
    track(kind, url);
  }

  function track(method, url){
    // Hook in analytics here if you’d like, e.g. gtag('event','share',{method, item_id:url})
  }

  function createToast(){ const el=document.createElement('div'); el.className='toast'; document.body.appendChild(el); return el; }
  function showToast(msg){ toast.textContent=msg; toast.classList.add('show'); setTimeout(()=> toast.classList.remove('show'), 1400); }

  // QR modal (no deps)
  const qr = createQrModal();
  function createQrModal(){
    const overlay = document.createElement('div');
    overlay.className = 'qr-overlay';
    overlay.innerHTML = `
      <div class="qr-modal">
        <h3>Scan to open</h3>
        <img id="qr-img" alt="QR code" width="256" height="256" />
        <div class="share-divider" style="margin:.65rem 0"></div>
        <button class="share-btn qr-close">Close</button>
      </div>`;
    document.body.appendChild(overlay);
    overlay.addEventListener('click', (e)=>{
      if(e.target === overlay || e.target.closest('.qr-close')) overlay.classList.remove('open');
    });
    return overlay;
  }
  function showQr(url){
    const img = qr.querySelector('#qr-img');
    const api = 'https://api.qrserver.com/v1/create-qr-code/';
    img.setAttribute('src', api + '?size=256x256&data=' + encodeURIComponent(url));
    qr.classList.add('open');
  }

  grid?.addEventListener('click', async (e)=>{
    const btn = e.target.closest('.share-btn');
    const item = e.target.closest('.share-item');

    if(btn){
      const title = btn.getAttribute('data-share-title') || document.title;
      const text  = btn.getAttribute('data-share-text') || title;
      const rel   = btn.getAttribute('data-share-rel') || '/';
      const url   = absUrl(rel);
      const did   = await doNativeShare(title, text, url);
      if(!did) openMenu(btn);
    }

    if(item){
      const wrap  = item.closest('.share-wrapper');
      const btn2  = wrap.querySelector('.share-btn');
      const title = btn2.getAttribute('data-share-title') || document.title;
      const text  = btn2.getAttribute('data-share-text') || title;
      const rel   = btn2.getAttribute('data-share-rel') || '/';
      const url   = absUrl(rel);
      const action = item.getAttribute('data-action');

      if(action === 'native'){
        await doNativeShare(title, text, url);
      } else if(action === 'copy'){
        // Copy clean URL (no UTMs)
        await copyToClipboard(url);
      } else if(['fb','wa','tg','bsky','thr','mail'].includes(action)){
        // Add UTMs only when it's your domain
        social(action, title, text, withUtmIfSameOrigin(url));
      } else if(action === 'qr'){
        showQr(withUtmIfSameOrigin(url));
      }
      closeAllMenus();
    }
  });

})();
</script>



<!-- end of card -->



<!-- PAST EVENTS -->
<h3 class="section-heading">Past Events</h3>
<div class="card-grid-wrapper">
  <div class="card-grid compact">
    {pastEvents.map((event, index) => (
      <div
        class="card past-event"
        data-index={index}
        data-city={(event["City"] || "").toLowerCase()}
        data-area={(event["Area"] || "").toLowerCase()}
        data-tags={(event["Tags"] || []).join(",").toLowerCase()}
      >
        <h2>{event["Event Name"]}</h2>
        {event.Description && <p>{event.Description}</p>}
        <div class="meta">
          {event.Venue && <div class="meta-line"><strong>Venue:</strong> {event.Venue}</div>}
          {event.City && <div class="meta-line"><strong>City:</strong> {event.City}</div>}
          {event.Area && <div class="meta-line"><strong>Area:</strong> {event.Area}</div>}
        </div>
        {event["Event Date"] && (
          <p class="when-to-go"><i>{event["Event Date"]}</i></p>
        )}
        {event["Event Page URL"] && (
  <div class="links">
    <a href={event["Event Page URL"]} target="_blank" rel="noopener noreferrer">
      More Info
    </a>
  </div>
)}
      </div>
    ))}
  </div>
</div>


<!-- Footer -->

<footer style="margin-top: 4rem; padding: 2rem 1rem; text-align: center; font-size: 0.8rem; color: #555;">
<div style="transform: scale(0.5); transform-origin: top center;">
  <script type="text/javascript" 
    src="https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js" 
    data-name="bmc-button" 
    data-slug="tiaross" 
    data-color="#BD5FFF" 
    data-emoji="📖"  
    data-font="Bree" 
    data-text="Buy me a book" 
    data-outline-color="#000000" 
    data-font-color="#ffffff" 
    data-coffee-color="#FFDD00">
  </script>
</div>

     <p>📍 DFW Scene<br />
     <em>Outings That Actually Hit. Find Your Scene.</em><br />
      <a href="/about">About</a></p>
    </footer>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const searchInput = document.createElement("input");
  searchInput.type = "text";
  searchInput.placeholder = "Search events by name, venue, or description...";
  searchInput.style.cssText = `
    width: 100%;
    padding: 0.75rem;
    margin: 1rem 0;
    border-radius: 8px;
    border: 1px solid #ccc;
    font-size: 1rem;
  `;

  // Insert search bar after the header
  document.querySelector('.about-header').after(searchInput);

  searchInput.addEventListener('input', (e) => {
    const term = e.target.value.toLowerCase();
    document.querySelectorAll('#special-event-container .card').forEach(card => {
      const text = card.textContent.toLowerCase();
      card.style.display = text.includes(term) ? 'block' : 'none';
    });
  });
});
</script>
  </body>
</html>